// Code generated by protoc-gen-go. DO NOT EDIT.
// source: rpc/tcapcollection.proto

/*
Package rpc is a generated protocol buffer package.

It is generated from these files:
	rpc/tcapcollection.proto

It has these top-level messages:
	StateInfo
	SCCPAddress
	TCAPInfo
	ROSInfo
*/
package rpc

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import google_protobuf "github.com/golang/protobuf/ptypes/empty"
import google_protobuf1 "github.com/golang/protobuf/ptypes/timestamp"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type StateInfo struct {
	Time    *google_protobuf1.Timestamp `protobuf:"bytes,1,opt,name=time" json:"time,omitempty"`
	Calling *SCCPAddress                `protobuf:"bytes,2,opt,name=calling" json:"calling,omitempty"`
	Called  *SCCPAddress                `protobuf:"bytes,3,opt,name=called" json:"called,omitempty"`
	Tcap    *TCAPInfo                   `protobuf:"bytes,4,opt,name=tcap" json:"tcap,omitempty"`
	Ros     []*ROSInfo                  `protobuf:"bytes,5,rep,name=ros" json:"ros,omitempty"`
}

func (m *StateInfo) Reset()                    { *m = StateInfo{} }
func (m *StateInfo) String() string            { return proto.CompactTextString(m) }
func (*StateInfo) ProtoMessage()               {}
func (*StateInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *StateInfo) GetTime() *google_protobuf1.Timestamp {
	if m != nil {
		return m.Time
	}
	return nil
}

func (m *StateInfo) GetCalling() *SCCPAddress {
	if m != nil {
		return m.Calling
	}
	return nil
}

func (m *StateInfo) GetCalled() *SCCPAddress {
	if m != nil {
		return m.Called
	}
	return nil
}

func (m *StateInfo) GetTcap() *TCAPInfo {
	if m != nil {
		return m.Tcap
	}
	return nil
}

func (m *StateInfo) GetRos() []*ROSInfo {
	if m != nil {
		return m.Ros
	}
	return nil
}

type SCCPAddress struct {
	Ssn    uint32 `protobuf:"varint,1,opt,name=ssn" json:"ssn,omitempty"`
	Ton    uint32 `protobuf:"varint,2,opt,name=ton" json:"ton,omitempty"`
	Npi    uint32 `protobuf:"varint,3,opt,name=npi" json:"npi,omitempty"`
	Number string `protobuf:"bytes,4,opt,name=number" json:"number,omitempty"`
}

func (m *SCCPAddress) Reset()                    { *m = SCCPAddress{} }
func (m *SCCPAddress) String() string            { return proto.CompactTextString(m) }
func (*SCCPAddress) ProtoMessage()               {}
func (*SCCPAddress) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *SCCPAddress) GetSsn() uint32 {
	if m != nil {
		return m.Ssn
	}
	return 0
}

func (m *SCCPAddress) GetTon() uint32 {
	if m != nil {
		return m.Ton
	}
	return 0
}

func (m *SCCPAddress) GetNpi() uint32 {
	if m != nil {
		return m.Npi
	}
	return 0
}

func (m *SCCPAddress) GetNumber() string {
	if m != nil {
		return m.Number
	}
	return ""
}

type TCAPInfo struct {
	Otid []byte `protobuf:"bytes,1,opt,name=otid,proto3" json:"otid,omitempty"`
	Dtid []byte `protobuf:"bytes,2,opt,name=dtid,proto3" json:"dtid,omitempty"`
	Tag  int32  `protobuf:"varint,3,opt,name=tag" json:"tag,omitempty"`
}

func (m *TCAPInfo) Reset()                    { *m = TCAPInfo{} }
func (m *TCAPInfo) String() string            { return proto.CompactTextString(m) }
func (*TCAPInfo) ProtoMessage()               {}
func (*TCAPInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *TCAPInfo) GetOtid() []byte {
	if m != nil {
		return m.Otid
	}
	return nil
}

func (m *TCAPInfo) GetDtid() []byte {
	if m != nil {
		return m.Dtid
	}
	return nil
}

func (m *TCAPInfo) GetTag() int32 {
	if m != nil {
		return m.Tag
	}
	return 0
}

type ROSInfo struct {
	Type     int32 `protobuf:"varint,1,opt,name=type" json:"type,omitempty"`
	InvokeId int32 `protobuf:"varint,2,opt,name=invokeId" json:"invokeId,omitempty"`
	OpCode   int32 `protobuf:"varint,3,opt,name=opCode" json:"opCode,omitempty"`
}

func (m *ROSInfo) Reset()                    { *m = ROSInfo{} }
func (m *ROSInfo) String() string            { return proto.CompactTextString(m) }
func (*ROSInfo) ProtoMessage()               {}
func (*ROSInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *ROSInfo) GetType() int32 {
	if m != nil {
		return m.Type
	}
	return 0
}

func (m *ROSInfo) GetInvokeId() int32 {
	if m != nil {
		return m.InvokeId
	}
	return 0
}

func (m *ROSInfo) GetOpCode() int32 {
	if m != nil {
		return m.OpCode
	}
	return 0
}

func init() {
	proto.RegisterType((*StateInfo)(nil), "rpc.StateInfo")
	proto.RegisterType((*SCCPAddress)(nil), "rpc.SCCPAddress")
	proto.RegisterType((*TCAPInfo)(nil), "rpc.TCAPInfo")
	proto.RegisterType((*ROSInfo)(nil), "rpc.ROSInfo")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for TCAPFlow service

type TCAPFlowClient interface {
	AddState(ctx context.Context, in *StateInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error)
}

type tCAPFlowClient struct {
	cc *grpc.ClientConn
}

func NewTCAPFlowClient(cc *grpc.ClientConn) TCAPFlowClient {
	return &tCAPFlowClient{cc}
}

func (c *tCAPFlowClient) AddState(ctx context.Context, in *StateInfo, opts ...grpc.CallOption) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	err := grpc.Invoke(ctx, "/rpc.TCAPFlow/AddState", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for TCAPFlow service

type TCAPFlowServer interface {
	AddState(context.Context, *StateInfo) (*google_protobuf.Empty, error)
}

func RegisterTCAPFlowServer(s *grpc.Server, srv TCAPFlowServer) {
	s.RegisterService(&_TCAPFlow_serviceDesc, srv)
}

func _TCAPFlow_AddState_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StateInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TCAPFlowServer).AddState(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rpc.TCAPFlow/AddState",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TCAPFlowServer).AddState(ctx, req.(*StateInfo))
	}
	return interceptor(ctx, in, info, handler)
}

var _TCAPFlow_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rpc.TCAPFlow",
	HandlerType: (*TCAPFlowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddState",
			Handler:    _TCAPFlow_AddState_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rpc/tcapcollection.proto",
}

func init() { proto.RegisterFile("rpc/tcapcollection.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 378 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xcf, 0x6e, 0xa3, 0x30,
	0x10, 0xc6, 0x37, 0x01, 0xf2, 0xc7, 0x09, 0xab, 0xc8, 0x87, 0x08, 0xb1, 0xd2, 0x6e, 0x96, 0x53,
	0xb4, 0x07, 0x22, 0x65, 0xfb, 0x00, 0x8d, 0x68, 0x2b, 0xe5, 0xd4, 0xd4, 0xc9, 0xad, 0x27, 0x82,
	0x1d, 0x84, 0x0a, 0xb6, 0x05, 0x4e, 0xab, 0xbc, 0x67, 0x1f, 0xa8, 0x9a, 0x31, 0x54, 0x55, 0xab,
	0xde, 0x3e, 0x7f, 0xf3, 0x9b, 0xe1, 0xb3, 0x07, 0x12, 0xd4, 0x3a, 0x5b, 0x99, 0x2c, 0xd5, 0x99,
	0x2a, 0x4b, 0x91, 0x99, 0x42, 0xc9, 0x58, 0xd7, 0xca, 0x28, 0xea, 0xd4, 0x3a, 0x0b, 0x7f, 0xe5,
	0x4a, 0xe5, 0xa5, 0x58, 0xa1, 0x75, 0x3c, 0x9f, 0x56, 0xa2, 0xd2, 0xe6, 0x62, 0x89, 0xf0, 0xcf,
	0xe7, 0xa2, 0x29, 0x2a, 0xd1, 0x98, 0xb4, 0xd2, 0x16, 0x88, 0x5e, 0x7b, 0x64, 0xbc, 0x37, 0xa9,
	0x11, 0x5b, 0x79, 0x52, 0x34, 0x26, 0x2e, 0x00, 0x41, 0x6f, 0xd1, 0x5b, 0x4e, 0xd6, 0x61, 0x6c,
	0xbb, 0xe3, 0xae, 0x3b, 0x3e, 0x74, 0xdd, 0x0c, 0x39, 0xfa, 0x8f, 0x0c, 0xb3, 0xb4, 0x2c, 0x0b,
	0x99, 0x07, 0x7d, 0x6c, 0x99, 0xc5, 0xb5, 0xce, 0xe2, 0x7d, 0x92, 0xec, 0x36, 0x9c, 0xd7, 0xa2,
	0x69, 0x58, 0x07, 0xd0, 0x25, 0x19, 0x80, 0x14, 0x3c, 0x70, 0xbe, 0x41, 0xdb, 0x3a, 0xfd, 0x4b,
	0x5c, 0xb8, 0x6e, 0xe0, 0x22, 0xe7, 0x23, 0x77, 0x48, 0x36, 0x3b, 0x88, 0xc8, 0xb0, 0x44, 0x7f,
	0x13, 0xa7, 0x56, 0x4d, 0xe0, 0x2d, 0x9c, 0xe5, 0x64, 0x3d, 0x45, 0x82, 0xdd, 0xef, 0x11, 0x80,
	0x42, 0xf4, 0x48, 0x26, 0x1f, 0x26, 0xd3, 0x19, 0x71, 0x9a, 0x46, 0xe2, 0xb5, 0x7c, 0x06, 0x12,
	0x1c, 0xa3, 0x24, 0xa6, 0xf6, 0x19, 0x48, 0x70, 0xa4, 0x2e, 0x30, 0x9c, 0xcf, 0x40, 0xd2, 0x39,
	0x19, 0xc8, 0x73, 0x75, 0x14, 0x35, 0x26, 0x19, 0xb3, 0xf6, 0x14, 0xdd, 0x90, 0x51, 0x17, 0x87,
	0x52, 0xe2, 0x2a, 0x53, 0x70, 0x1c, 0x3d, 0x65, 0xa8, 0xc1, 0xe3, 0xe0, 0xf5, 0xad, 0x07, 0x1a,
	0xbf, 0x97, 0xe6, 0x38, 0xdd, 0x63, 0x20, 0xa3, 0x07, 0x32, 0x6c, 0x23, 0x43, 0x83, 0xb9, 0x68,
	0xfb, 0xec, 0x1e, 0x43, 0x4d, 0x43, 0x32, 0x2a, 0xe4, 0xb3, 0x7a, 0x12, 0x5b, 0x3b, 0xc8, 0x63,
	0xef, 0x67, 0x08, 0xa6, 0x74, 0xa2, 0xb8, 0x68, 0xe7, 0xb5, 0xa7, 0xf5, 0xb5, 0x0d, 0x76, 0x57,
	0xaa, 0x17, 0x7a, 0x45, 0x46, 0x1b, 0xce, 0x71, 0xb5, 0xf4, 0xa7, 0x7d, 0xea, 0x6e, 0xcd, 0xe1,
	0xfc, 0xcb, 0x62, 0x6f, 0xe1, 0x9f, 0x89, 0x7e, 0x1c, 0x07, 0xe8, 0xfc, 0x7f, 0x0b, 0x00, 0x00,
	0xff, 0xff, 0xd3, 0xcb, 0xe1, 0x88, 0x74, 0x02, 0x00, 0x00,
}
